/*
   Author: Cora Warda
   Project: CO2 Ampel Technikzentrum

   created:  21.01.2021
   modified: 02.02.2021
   modified: 10.04.2021
   modified: 04.05.2021
   modified: 06.05.2021
   modified: 13.05.2021
   modified: 14.05.2021

   Device Identifier: esp32app
   Password: 12345678
*/

/* Hardware specifications and additional informations
    ---------------------------------------------------------------------------------------------------------------------------------------

    CO2- Ampel
    CCS811:                       CO2/ TVOC/ Temperature data capture and transfer to ESP32
    QAPASS:                       Displays data transferred from ESP32
    ESP32 WROOM:                  Reading/Writing data from CCS811, transferring/receiving data via WiFi (MQTT)

    ---------------------------------------------------------------------------------------------------------------------------------------
    ---------------------------------------------------------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------------------------------
  Uses the ESP32 WiFi Library.
  Uses the ESP32 Webserver Library.
  Uses the ESP32 Wire Library.

  Uses the AsyncMqttClient Library        https://github.com/marvinroger/async-mqtt-client
  Uses the AutoConnect Library            https://github.com/Hieromon/AutoConnect
  Uses the Pagebuilder Library            https://www.arduino.cc/reference/en/libraries/pagebuilder/
  Uses the ArduinoJson Library            https://github.com/bblanchon/ArduinoJson
  Uses the Adafruit_Sensor Library        https://www.arduinolibraries.info/libraries/adafruit-ccs811-library
  Uses the LiquidCrystal_I2C Library      https://www.arduino.cc/reference/en/libraries/liquidcrystal-i2c/

  Optional:
  AutoConnect Library                     https://github.com/Hieromon/AutoConnect
  Pagebuilder Library                     https://www.arduino.cc/reference/en/libraries/pagebuilder/
  ArduinoJson Library                     https://github.com/bblanchon/ArduinoJson
  esp_task_wdt Library                    Library to disable ESP32 watchdog
  OTA Programming                         https://lastminuteengineers.com/esp32-ota-updates-arduino-ide/

  For details on the CCS811, see:
  https://www.sciosense.com/wp-content/uploads/2020/01/SC-001232-DS-2-CCS811B-Datasheet-Revision-2.pdf

  For details on the ESP32 WROOM, see:
  https://www.espressif.com/sites/default/files/documentation/esp32-wroom-32_datasheet_en.pdf  |  https://www.espressif.com/en/products/hardware/esp-wroom-32/overview
  https://www.espressif.com/sites/default/files/documentation/esp32_technical_reference_manual_en.pdf

  For details on MQTT, see:
  https://randomnerdtutorials.com/esp32-mqtt-publish-subscribe-arduino-ide/ | https://randomnerdtutorials.com/what-is-mqtt-and-how-it-works/
  Functions copied and modified from: https://randomnerdtutorials.com/esp32-mqtt-publish-bme280-arduino

  For details on NodeRed/ Influxdb, see: https://flows.nodered.org/node/node-red-contrib-influxdb#:~:text=Node-RED%20nodes%20to%20write%20and%20query%20data%20from,understand%20the%20options%20provided%20by%20the%20different%20versions.
  https://diyprojects.io/node-red-tutorial-saving-mysensors-measurements-on-influxdb/#.YJ2skYdxeF4

  ---------------------------------------------------------------------------------------------------------------------------------------
  ---------------------------------------------------------------------------------------------------------------------------------------
*/
// ----------------------------------------------------------------------------------------------------------------------------------------//
// WIFI
#define WIFI_SSID           ""
#define WIFI_PASSWORD       ""
//#define MQTT_HOST           IPAddress(192, 168, 2, 113)             // Raspberry Pi Mosquitto MQTT Broker
//#define MQTT_HOST           "jupiter.fh-swf.de"           // For a cloud MQTT broker, type the domain name
//#define MQTT_HOST           IPAddress(192, 168, 43, 40)
#define MQTT_HOST           "mqtt.eclipseprojects.io"
#define MQTT_PORT           1883

// ----------------------------------------------------------------------------------------------------------------------------------------//
// MQTT specifications
// QoS (quality of service) for MQTT communication
// 0 = at most once | 1 = at least once | 2 = exactly once
#define MQTT_QoS_SUB        1                       // QoS for subscriptions
#define MQTT_QoS_PUB        1                       // QoS for publishing

#define MQTT_PUB_TEMP       "esp32/ccs811/temp/" 
#define MQTT_PUB_CO         "esp32/ccs811/co2/"
#define MQTT_PUB_TVOC       "esp32/ccs811/tvoc/"

//#define CLEARBITMASK(input, mask) input &= ~mask
//#define SETBITMASK(input, mask) input |= mask
// ----------------------------------------------------------------------------------------------------------------------------------------//

#include <WiFi.h>
#include <WebServer.h>
#include <AsyncMqttClient.h>            

// OTA Programming                 
#include <ESPmDNS.h>
#include <ArduinoOTA.h>

extern "C" {
#include "freertos/FreeRTOS.h"
#include "freertos/timers.h"
}

// Sensors
#include <Wire.h>
#include <Adafruit_Sensor.h>            
#include "Adafruit_CCS811.h"
#include <LiquidCrystal_I2C.h>          

#define SEALEVELPRESSURE_HPA (1013.25)

LiquidCrystal_I2C lcd(0x27,16,2);
int gruen = 12;
int gelb = 13;
int rot = 14;
int durchlauf = 0;

// CSS811 I2C
Adafruit_CCS811 ccs;
// Variables to hold sensor readings
int temp;
int co;
int tvoc;

// MAC Adress 
String MAC = "";

AsyncMqttClient mqttClient;
TimerHandle_t mqttReconnectTimer;
TimerHandle_t wifiReconnectTimer;


// ----------------------------------------------------------------------------------------------------------------------------------------//
// -------- TASKS -------------------------------------------------------------------------------------------------------------------------//
// ----------------------------------------------------------------------------------------------------------------------------------------//

//=============================================================================
// Ampel set to green/ yellow/ red
// https://www.cik-solutions.com/anwendungen/co2-im-innenraum/#:~:text=Grenzwerte%20f%C3%BCr%20CO2%20in%20R%C3%A4umen%20%20%20CO2,%20%3E0%2C14%20%25%20%20%20Niedrige%20Raumluftqualit%C3%A4t%20
  
void setAmpel(float CO2){
  if(CO2<800){
    digitalWrite(gruen,HIGH);
    digitalWrite(gelb,LOW);
    digitalWrite(rot,LOW); 
    lcd.print("sehr gut"); 
  }else{
    if(CO2<1400){
      digitalWrite(gruen,LOW);
      digitalWrite(gelb,HIGH);
      digitalWrite(rot,LOW); 
      lcd.print("okay"); 
    }else{
        digitalWrite(gruen,LOW);
        digitalWrite(gelb,LOW);
        digitalWrite(rot,HIGH);  
        lcd.print("schlecht");
    }  
  }
}

//=============================================================================
// Display and LED Test
// Display: "CO2-Ampel fÃ¼rs Technikzentrum/ Talente von Morgen"
// LED: Blink with 100Hz

void start(){
 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(" CO2-Ampel fuers");
  lcd.setCursor(0,1);
  lcd.print("Technikzentrum");
  lcd.backlight();
  delay(1000);
  lcd.noBacklight();
  digitalWrite(gruen,HIGH);
  digitalWrite(gelb,HIGH);
  digitalWrite(rot,HIGH);
  delay(1000);
  lcd.backlight();
  digitalWrite(gruen,LOW);
  digitalWrite(gelb,LOW);
  digitalWrite(rot,LOW);
  delay(1000);
  lcd.noBacklight();
  digitalWrite(gruen,HIGH);
  digitalWrite(gelb,HIGH);
  digitalWrite(rot,HIGH);
  delay(1000);
  lcd.backlight();
  digitalWrite(gruen,LOW);
  digitalWrite(gelb,LOW);
  digitalWrite(rot,LOW);
  delay(1000);
  lcd.noBacklight();
  digitalWrite(gruen,HIGH);
  digitalWrite(gelb,HIGH);
  digitalWrite(rot,HIGH);
  delay(1000);
  lcd.backlight();
  digitalWrite(gruen,LOW);
  digitalWrite(gelb,LOW);
  digitalWrite(rot,LOW);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("   Talente");
  lcd.setCursor(0,1);
  lcd.print(" von Morgen");
  lcd.noBacklight();
  digitalWrite(gruen,HIGH);
  digitalWrite(gelb,HIGH);
  digitalWrite(rot,HIGH);
  delay(1000);
  lcd.backlight();
  digitalWrite(gruen,LOW);
  digitalWrite(gelb,LOW);
  digitalWrite(rot,LOW);
  delay(1000);
  lcd.noBacklight();
  digitalWrite(gruen,HIGH);
  digitalWrite(gelb,HIGH);
  digitalWrite(rot,HIGH);
  delay(1000);
  lcd.backlight();
  digitalWrite(gruen,LOW);
  digitalWrite(gelb,LOW);
  digitalWrite(rot,LOW);
}

//=============================================================================
// WIFI Connection
void connectToWifi() {
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
}

//=============================================================================
// MQTT Connection
void connectToMqtt() {
  Serial.println("Connecting to MQTT...");
  mqttClient.connect();

}

//=============================================================================
// Sucessfully connected to WIFI/ Lost WIFI Connection
void WiFiEvent(WiFiEvent_t event) {
  Serial.printf("[WiFi-event] event: %d\n", event);
  switch(event) {
    case SYSTEM_EVENT_STA_GOT_IP:
      Serial.println("WiFi connected");
      Serial.println("IP address: ");
      Serial.println(WiFi.localIP());
      connectToMqtt();
      break;
    case SYSTEM_EVENT_STA_DISCONNECTED:
      Serial.println("WiFi lost connection");
     // xTimerStop(mqttReconnectTimer, 0); // ensure we don't reconnect to MQTT while reconnecting to Wi-Fi
     // xTimerStart(wifiReconnectTimer, 0);
      break;
  }
}

//=============================================================================
// MQTT Connection - Session present
void onMqttConnect(bool sessionPresent) {
  Serial.println("Connected to MQTT.");
  Serial.print("Session present: ");
  Serial.println(sessionPresent);
}

//=============================================================================
// Lost MQTT Connection
void onMqttDisconnect(AsyncMqttClientDisconnectReason reason) {
  Serial.println("Disconnected from MQTT.");
  if (WiFi.isConnected()) {
   // xTimerStart(mqttReconnectTimer, 0);
  }
}

//=============================================================================
// Publish PacketID
void onMqttPublish(uint16_t packetId) {
  Serial.print("Publish acknowledged.");
  Serial.print("  packetId: ");
  Serial.println(packetId);
}

// ----------------------------------------------------------------------------------------------------------------------------------------//
// -------- SETUP--------------------------------------------------------------------------------------------------------------------------//
// ----------------------------------------------------------------------------------------------------------------------------------------//

void setup() {
  Serial.begin(115200);
  Serial.println("CCS811 test");
  Wire.begin();

  // Initialize CCS811 sensor
   if (!ccs.begin()) {
    Serial.println("Could not find a valid CCS811 sensor, check wiring!");
    while (1);
  } else Serial.println("Found a sensor"); 

  lcd.init();
  lcd.backlight();
  pinMode(12,OUTPUT);
  pinMode(13,OUTPUT);
  pinMode(14,OUTPUT);

  // Set MAC-Adress 
  MAC = String(WiFi.macAddress());
  Serial.println(MAC); 
  Serial.println("\n"); 
  
  //Temperatursensor kallibrieren 
  while(!ccs.available());
  float temp = ccs.calculateTemperature();
  ccs.setTempOffset(temp - 25.0);

//  // Wait for the sensor to be ready
  while(!ccs.available());
  
  start();
//  
  mqttReconnectTimer = xTimerCreate("mqttTimer", pdMS_TO_TICKS(2000), pdFALSE, (void*)0, reinterpret_cast<TimerCallbackFunction_t>(connectToMqtt));
  wifiReconnectTimer = xTimerCreate("wifiTimer", pdMS_TO_TICKS(2000), pdFALSE, (void*)0, reinterpret_cast<TimerCallbackFunction_t>(connectToWifi));

  WiFi.onEvent(WiFiEvent);

  mqttClient.onConnect(onMqttConnect);
  mqttClient.onDisconnect(onMqttDisconnect);
  mqttClient.onPublish(onMqttPublish);
  mqttClient.setServer(MQTT_HOST, MQTT_PORT);
  // If your broker requires authentication (username and password), set them below
 // mqttClient.setCredentials("ampel", "ampel");
  connectToWifi();
}

// ----------------------------------------------------------------------------------------------------------------------------------------//
// -------- LOOP --------------------------------------------------------------------------------------------------------------------------//
// ----------------------------------------------------------------------------------------------------------------------------------------//

void loop() {
    if (durchlauf >= 2) {
    durchlauf = 0; 

    // Publish an MQTT message on topic esp32/CSS811/temperature + MAC Adress
        uint32_t packetIdPub1 = mqttClient.publish("testtopic", MQTT_QoS_PUB, true,"TESTNACHRICHT");                        

    uint32_t packetIdPubtest = mqttClient.publish(((String)MQTT_PUB_TEMP + MAC).c_str(), MQTT_QoS_PUB, true, String(temp).c_str());                        
    Serial.printf("Publishing on topic %s at QoS 1, packetId: %i", ((String)MQTT_PUB_TEMP + MAC).c_str(), packetIdPub1);
    Serial.printf("Message: %d \n", temp);

    // Publish an MQTT message on topic esp32/CSS811/CO2 + MAC Adress
    uint32_t packetIdPub2 = mqttClient.publish(((String)MQTT_PUB_CO + MAC).c_str(), MQTT_QoS_PUB, true, String(co).c_str());                        
    Serial.printf("Publishing on topic %s at QoS 1, packetId %i: ", MQTT_PUB_CO, packetIdPub2);
    Serial.printf("Message: %d \n", co);

    // Publish an MQTT message on topic esp32/CSS811/TVOC + MAC Adress
     uint32_t packetIdPub3 = mqttClient.publish(((String)MQTT_PUB_TVOC + MAC).c_str(), MQTT_QoS_PUB, true, String(tvoc).c_str()); 
                            
    Serial.printf("Publishing on topic %s at QoS 1, packetId: %i", MQTT_PUB_TVOC, packetIdPub3);
    Serial.printf("Message: %d \n", tvoc);
         
  } else {
    durchlauf = durchlauf+1;
    
    lcd.clear(); 

// CSS811 sensor readings

    if(ccs.available()){
      if(!ccs.readData()){
        temp = ccs.calculateTemperature();
        ccs.setTempOffset(temp - 25.0);
        co= ccs.geteCO2();
        tvoc= ccs.getTVOC();     
    }
  else  {
  Serial.println("ERROR!");
    }
  }

// Display sensor readings QAPASS CO2 in ppm/ TVOC in ppb/ Temp in Â°C

  lcd.setCursor(0,0);
  lcd.print("TVOC|  CO2 | TEM");
  lcd.setCursor(0,1);
  lcd.print(tvoc);
  lcd.print("  | ");
  lcd.print(co);
  lcd.print(" | ");
  lcd.print(temp);
  
// Set CO2-Ampel green/ yellow/ red 
  
  setAmpel(co);
          

// Display Sensor readings serial monitor 
  Serial.println(MAC.c_str());
  Serial.println("Sensor Readings:");
  Serial.println("  CO2 = " + String(co)  + "ppm");
  Serial.println("  Temperature = " + String(temp) + "Â°C");
  Serial.println("  TVOC = " + String(tvoc) + "ppb");   
    
  }   
// Wait 5 seconds 
     
 delay(5000);
}